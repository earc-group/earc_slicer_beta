.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Alien::wxWidgets 3"
.TH Alien::wxWidgets 3 "2018-12-06" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Alien::wxWidgets \- building, finding and using wxWidgets binaries
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Alien::wxWidgets <options>;
\&
\&    my $version = Alien::wxWidgets\->version;
\&    my $config = Alien::wxWidgets\->config;
\&    my $compiler = Alien::wxWidgets\->compiler;
\&    my $linker = Alien::wxWidgets\->linker;
\&    my $include_path = Alien::wxWidgets\->include_path;
\&    my $defines = Alien::wxWidgets\->defines;
\&    my $cflags = Alien::wxWidgets\->c_flags;
\&    my $linkflags = Alien::wxWidgets\->link_flags;
\&    my $libraries = Alien::wxWidgets\->libraries( qw(gl adv core base) );
\&    my @libraries = Alien::wxWidgets\->link_libraries( qw(gl adv core base) );
\&    my @implib = Alien::wxWidgets\->import_libraries( qw(gl adv core base) );
\&    my @shrlib = Alien::wxWidgets\->shared_libraries( qw(gl adv core base) );
\&    my @keys = Alien::wxWidgets\->library_keys; # \*(Aqgl\*(Aq, \*(Aqadv\*(Aq, ...
\&    my $library_path = Alien::wxWidgets\->shared_library_path;
\&    my $key = Alien::wxWidgets\->key;
\&    my $prefix = Alien::wxWidgets\->prefix;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please see Alien for the manifesto of the Alien namespace.
.PP
In short \f(CW\*(C`Alien::wxWidgets\*(C'\fR can be used to detect and get
configuration settings from an installed wxWidgets.
.SH "METHODS"
.IX Header "METHODS"
.SS "load/import"
.IX Subsection "load/import"
.Vb 9
\&    use Alien::wxWidgets version          => 2.004 | [ 2.004, 2.005 ],
\&                         compiler_kind    => \*(Aqgcc\*(Aq | \*(Aqcl\*(Aq, # Windows only
\&                         compiler_version => \*(Aq3.3\*(Aq, # only GCC for now
\&                         toolkit          => \*(Aqgtk2\*(Aq,
\&                         debug            => 0 | 1,
\&                         unicode          => 0 | 1,
\&                         mslu             => 0 | 1,
\&                         key              => $key,
\&                         ;
\&
\&    Alien::wxWidgets\->load( <same as the above> );
.Ve
.PP
Using \f(CW\*(C`Alien::wxWidgets\*(C'\fR without parameters will load a default
configuration (for most people this will be the only installed
confiuration). Additional parameters allow to be more selective.
.PP
If there is no matching configuration the method will \f(CW\*(C`die()\*(C'\fR.
.PP
In case no arguments are passed in the \f(CW\*(C`use\*(C'\fR, \f(CW\*(C`Alien::wxWidgets\*(C'\fR
will try to find a reasonable default configuration.
.PP
Please note that when the version is pecified as \f(CW\*(C`version =\*(C'\fR 2.004>
it means \*(L"any version >= 2.004\*(R" while when specified as
\&\f(CW\*(C`version =\*(C'\fR [ 2.004, 2.005 ]> it means \*(L"any version => 2.004 and < 2.005\*(R".
.SS "key"
.IX Subsection "key"
.Vb 1
\&    my $key = Alien::wxWidgets key;
.Ve
.PP
Returns an unique key that can be used to reload the
currently-loaded configuration.
.SS "version"
.IX Subsection "version"
.Vb 1
\&    my $version = Alien::wxWidgets\->version;
.Ve
.PP
Returns the wxWidgets version for this \f(CW\*(C`Alien::wxWidgets\*(C'\fR
installation in the form \s-1MAJOR + MINOR / 1_000 + RELEASE / 1_000_000\s0
e.g. 2.008012 for wxWidgets 2.8.12 and 2.009 for wxWidgets 2.9.0.
.SS "config"
.IX Subsection "config"
.Vb 1
\&    my $config = Alien::wxWidgets\->config;
.Ve
.PP
Returns some miscellaneous configuration informations for wxWidgets
in the form
.PP
.Vb 5
\&    { toolkit   => \*(Aqmsw\*(Aq | \*(Aqgtk\*(Aq | \*(Aqmotif\*(Aq | \*(Aqx11\*(Aq | \*(Aqcocoa\*(Aq | \*(Aqmac\*(Aq,
\&      debug     => 1 | 0,
\&      unicode   => 1 | 0,
\&      mslu      => 1 | 0,
\&      }
.Ve
.SS "include_path"
.IX Subsection "include_path"
.Vb 1
\&    my $include_path = Alien::wxWidgets\->include_path;
.Ve
.PP
Returns the include paths to be used in a format suitable for the
compiler (usually something like \*(L"\-I/usr/local/include \-I/opt/wx/include\*(R").
.SS "defines"
.IX Subsection "defines"
.Vb 1
\&    my $defines = Alien::wxWidgets\->defines;
.Ve
.PP
Returns the compiler defines to be used in a format suitable for the
compiler (usually something like \*(L"\-D_\|_WXDEBUG_\|_ \-DFOO=bar\*(R").
.SS "c_flags"
.IX Subsection "c_flags"
.Vb 1
\&    my $cflags = Alien::wxWidgets\->c_flags;
.Ve
.PP
Returns additional compiler flags to be used.
.SS "compiler"
.IX Subsection "compiler"
.Vb 1
\&    my $compiler = Alien::wxWidgets\->compiler;
.Ve
.PP
Returns the (\*(C+) compiler used for compiling wxWidgets.
.SS "linker"
.IX Subsection "linker"
.Vb 1
\&    my $linker = Alien::wxWidgets\->linker;
.Ve
.PP
Returns a linker suitable for linking \*(C+ binaries.
.SS "link_flags"
.IX Subsection "link_flags"
.Vb 1
\&    my $linkflags = Alien::wxWidgets\->link_flags;
.Ve
.PP
Returns additional link flags.
.SS "libraries"
.IX Subsection "libraries"
.Vb 1
\&    my $libraries = Alien::wxWidgets\->libraries( qw(gl adv core base) );
.Ve
.PP
Returns link flags for linking the libraries passed as arguments. This
usually includes some search path specification in addition to the
libraries themselves. The caller is responsible for the correct order
of the libraries.
.SS "link_libraries"
.IX Subsection "link_libraries"
.Vb 1
\&    my @libraries = Alien::wxWidgets\->link_libraries( qw(gl adv core base) );
.Ve
.PP
Returns a list of linker flags that can be used to link the libraries
passed as arguments.
.SS "import_libraries"
.IX Subsection "import_libraries"
.Vb 1
\&    my @implib = Alien::wxWidgets\->import_libraries( qw(gl adv core base) );
.Ve
.PP
Windows specific. Returns a list of import libraries corresponding to
the libraries passed as arguments.
.SS "shared_libraries"
.IX Subsection "shared_libraries"
.Vb 1
\&    my @shrlib = Alien::wxWidgets\->shared_libraries( qw(gl adv core base) );
.Ve
.PP
Returns a list of shared libraries corresponding to the libraries
passed as arguments.
.SS "library_keys"
.IX Subsection "library_keys"
.Vb 1
\&    my @keys = Alien::wxWidgets\->library_keys;
.Ve
.PP
Returns a list of keys that can be passed to \f(CW\*(C`shared_libraries\*(C'\fR,
\&\f(CW\*(C`import_libraries\*(C'\fR and \f(CW\*(C`link_libraries\*(C'\fR.
.SS "library_path"
.IX Subsection "library_path"
.Vb 1
\&    my $library_path = Alien::wxWidgets\->shared_library_path;
.Ve
.PP
Windows specific. Returns the path at which the private copy
of wxWidgets libraries has been installed.
.SS "prefix"
.IX Subsection "prefix"
.Vb 1
\&    my $prefix = Alien::wxWidgets\->prefix;
.Ve
.PP
Returns the install prefix for wxWidgets.
.SS "dump_configurations"
.IX Subsection "dump_configurations"
.Vb 1
\&    Alien::wxWidgets\->dump_configurations( %filters );
.Ve
.PP
Prints a list of available configurations (mainly useful for
interactive use/debugging).
.SS "show_configurations"
.IX Subsection "show_configurations"
.Vb 1
\&    Alien::wxWidgets\->show_configurations( %filters );
.Ve
.PP
Prints a human-readable list of available configurations (mainly
useful for interactive use/debugging).
.SS "get_configurations"
.IX Subsection "get_configurations"
.Vb 1
\&   my $configs = Alien::wxWidgets\->get_configurations( %filters );
.Ve
.PP
Returns a list of configurations matching the given filters.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mattia Barbon <mbarbon@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
.IP "Alien::wxWidgets" 4
.IX Item "Alien::wxWidgets"
Copyright (c) 2005\-2012 Mattia Barbon <mbarbon@cpan.org>
.Sp
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself
.IP "inc/bin/patch" 4
.IX Item "inc/bin/patch"
was taken from the Perl Power Tools distributions
.Sp
Copyright (c) 1999 Moogle Stuffy Software <tgy@chocobo.org>
.Sp
You may play with this software in accordance with the Perl Artistic License.
.Sp
You may use this documentation under the auspices of the \s-1GNU\s0 General Public
License.
.IP "inc/bin/patch.exe" 4
.IX Item "inc/bin/patch.exe"
was downloaded from http://gnuwin32.sourceforge.net/packages/patch.htm
ad is copyrighted by its authors, sources are included inside the
inc/src directory.
.Sp
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.Sp
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the
\&\s-1GNU\s0 General Public License for more details.
.Sp
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA\s0
.IP "bundled files from \s-1CPAN\s0" 4
.IX Item "bundled files from CPAN"
.Vb 9
\&    inc/File/Fetch/Item.pm
\&    inc/File/Fetch.pm
\&    inc/File/Spec/Unix.pm
\&    inc/IPC/Cmd.pm
\&    inc/Locale/Maketext/Simple.pm
\&    inc/Module/Load/Conditional.pm
\&    inc/Module/Load.pm
\&    inc/Params/Check.pm
\&    inc/Archive/Extract.pm
.Ve
.Sp
Are copyright their respective authors an can be used according
to the license specified in their \s-1CPAN\s0 distributions.
