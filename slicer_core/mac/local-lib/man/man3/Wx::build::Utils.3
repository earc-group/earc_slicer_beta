.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "build::Wx::build::Utils 3"
.TH build::Wx::build::Utils 3 "2017-04-08" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Wx::build::Utils \- utility routines
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.SS "xs_dependencies"
.IX Subsection "xs_dependencies"
.Vb 1
\&  my %dependencies = xs_dependencies( $mm_object, [ \*(Aqdir1\*(Aq, \*(Aqdir2\*(Aq ] );
.Ve
.SS "obj_from_src"
.IX Subsection "obj_from_src"
.Vb 1
\&  my @obj_files = obj_from_src( \*(AqFoo.xs\*(Aq, \*(Aqbar.c\*(Aq, \*(Aqcpp/bar.cpp\*(Aq );
.Ve
.PP
Calculates the object file name from the source file name.
In scalar context returns the first file.
.SS "write_string, write_file"
.IX Subsection "write_string, write_file"
.Vb 2
\&  write_string( \*(Aqfile\*(Aq, $scalar );
\&  write_file( \*(Aqfile\*(Aq, $scalar );
.Ve
.PP
Like File::Slurp.
.SS "read_file"
.IX Subsection "read_file"
.Vb 1
\&  my $string = read_file( \*(Aqfile\*(Aq );
.Ve
.SS "lib_file, arch_file, arch_auto_file"
.IX Subsection "lib_file, arch_file, arch_auto_file"
.Vb 3
\&  my $file = lib_file( \*(AqFoo.pm\*(Aq );          # blib/lib/Foo.pm     on *nix
\&  my $file = lib_file( \*(AqFoo/Bar.pm\*(Aq );      # blib\elib\eFoo\eBar.pm on Win32
\&  my $file = arch_auto_file( \*(AqMy\eMy.dll\*(Aq ); # blib\earch\eauto\eMy\eMy.dll
.Ve
.PP
All input paths must be relative, output paths may be absolute.
.SS "path_search"
.IX Subsection "path_search"
.Vb 1
\&  my $file = path_search( \*(Aqfoo.exe\*(Aq );
.Ve
.PP
Searches \s-1PATH\s0 for the given executable.
.SS "files_with_constants"
.IX Subsection "files_with_constants"
.Vb 1
\&  my @files = files_with_constants;
.Ve
.PP
Finds files containing constants
.SS "files_with_overload"
.IX Subsection "files_with_overload"
.Vb 1
\&  my @files = files_with_overload;
.Ve
.PP
Finds files containing overloaded XS/Perl subroutines
