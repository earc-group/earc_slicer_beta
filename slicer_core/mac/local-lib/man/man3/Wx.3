.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Wx 3"
.TH Wx 3 "2017-04-17" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Wx \- interface to the wxWidgets cross\-platform GUI toolkit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Wx;
\&
\&    my $app = Wx::SimpleApp\->new;
\&    my $frame = Wx::Frame\->new( undef, \-1, \*(AqHello, world!\*(Aq );
\&
\&    $frame\->Show;
\&    $app\->MainLoop;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Wx module is a wrapper for the wxWidgets (formerly known as wxWindows)
\&\s-1GUI\s0 toolkit.
.PP
This module comes with extensive documentation in \s-1HTML\s0 format; you
can download it from http://wxperl.sourceforge.net/
.SH "INSTALLATION"
.IX Header "INSTALLATION"
Please see \fIdocs/INSTALL.pod\fR in source package.
.SH "Runtime Assertions"
.IX Header "Runtime Assertions"
For wxWidgets 2.9.3 and greater, Wx can switch runtime assertions on
and off. In wxWidgets 2.9.x and above, there are three levels of
debuging
.PP
0 \- No debug assertions
1 \- Low cost debug assertions
2 \- All debug assertions
.PP
If you used Alien::wxWidgets 0.61 or greater to build your wxWidgets,
then the libraries will be built using debug level 1. If you
specified \-\-wxWidgets\-debug for a debug build, then debug level 2
will have been used.
.PP
By default in Wx, debug assertions are switched off. However you may
switch assertions on by using
.PP
.Vb 1
\& Wx::EnableDefaultAssertHandler();
.Ve
.PP
you can switch assertions off again by using
.PP
.Vb 1
\& Wx::DisableAssertHandler();
.Ve
.PP
You may also set en enviroment variable to cause all invocations
of Wx to call \fBWx::EnableDefaultAssertHandler()\fR.
.PP
.Vb 1
\& export WXPERL_OPTIONS=ENABLE_DEFAULT_ASSERT_HANDLER
.Ve
.PP
This may be useful during tests.
.PP
The enviroment setting \s-1WXPERL_OPTIONS\s0 can contain multiple
options. Options are checked for using a simple regex match.
So
.PP
.Vb 1
\& export WXPERL_OPTIONS="ENABLE_DEFAULT_ASSERT_HANDLER SOME_OTHER_SETTING"
.Ve
.PP
would evaluate as \s-1ENABLE_DEFAULT_ASSERT_HANDLER\s0 being set.
.PP
If you want to handle assert failures yourself you can override
wxApp::OnAssertFailure in your Wx::App derived class.
.PP
.Vb 4
\&  sub OnAssertFailure {
\&    my ( $self, $file, $line, $function, $condition, $msg ) = @_;
\&    ......
\&  }
.Ve
.PP
For wxWidgets 2.8.x, the assert methods have no effect. You may
however still usefully override wxApp::OnAssertFailure in a debug
build.
.SH "Running on Mac OSX"
.IX Header "Running on Mac OSX"
From version 0.98 wxPerl no longer needs to use the special startup
executable 'wxperl' to run scripts on the Mac. The ordinary perl
interpreter now works without problems. This is because wxPerl now
contains code that brings the running application to the front and
gives it the focus.
.PP
In a syntax checking editor you may prevent Wx code from being
given focus as the front process by setting an environment variable
.PP
.Vb 1
\& export WXPERL_OPTIONS=NO_MAC_SETFRONTPROCESS
.Ve
.PP
or
.PP
.Vb 1
\& $ENV{WXPERL_OPTIONS} = \*(AqNO_MAC_SETFRONTPROCESS\*(Aq;
.Ve
.PP
The enviroment setting \s-1WXPERL_OPTIONS\s0 can contain multiple
options. Options are checked for using a simple regex match.
So
.PP
.Vb 1
\& export WXPERL_OPTIONS="NO_MAC_SETFRONTPROCESS SOME_OTHER_SETTING"
.Ve
.PP
would evaluate as \s-1NO_MAC_SETFRONTPROCESS\s0 being set.
.PP
The code that makes the SetFrontProcess call is in Wx::Mini as
.PP
.Vb 1
\& Wx::MacSetFrontProcess();
.Ve
.PP
so it is also straightforward to override this method if you wish.
.PP
Finally, any code can force the running application to become the
front process regardless of environment settings by calling the xs
method directly. (Note the underscore in the method name).
.PP
.Vb 1
\& Wx::_MacSetFrontProcess();
.Ve
.SH "Locale Behaviour"
.IX Header "Locale Behaviour"
Beginning with 2.9.0 wxWidgets sets the application locale to the current
system locale. Formally in wxWidgets 2.8.x, the locale by default was 'C'.
.PP
A problem arises because in addition to loading gettext translation
files, this affects other C calls like printf, sprintf,...
.PP
Perl makes calls to these functions when formatting numbers.
Number formatting always uses underlying C library functions.
The statements 'use locale', or 'no locale' make no difference here.
.PP
So, if your locale is 'de' then when Wx starts, the C library locale gets
set accordingly.
.PP
.Vb 2
\&  use Wx;
\&  print 8.3
.Ve
.PP
will output 8,3 to the terminal. Formatting uses ',' as the fractional
separator.
.PP
This, whilst possibly correct, isn't what most users will be expecting.
.PP
If you want to set the locale to the system default you can do so explicitly.
.PP
.Vb 1
\&  $app\->{locale} = Wx::Locale\->new( &Wx::wxLANGUAGE_DEFAULT );
.Ve
.PP
You can then also reset just the locale for number formatting to 'C' if
that is what you require
.PP
.Vb 1
\&  use POSIX qw( setlocale LC_NUMERIC );
\&
\&  setlocale( LC_NUMERIC, C );
.Ve
.PP
This code applies equally regardless of which wxWidgets version is being
used.
.SH "Windows XP look"
.IX Header "Windows XP look"
For standalone (packed using \s-1PAR,\s0 Perl2Exe, Perl2App, ...)
applications to get Windows \s-1XP\s0 look, a file named \f(CW\*(C`App.exe.manifest\*(C'\fR
(assuming the program is named \f(CW\*(C`App.exe\*(C'\fR) and containing the text below
must either be placed in the same directory as the executable file or
compiled into the file itself. The module Win32::Exe can place a manifest
in an executable file
.PP
.Vb 10
\&  <?xml version="1.0" encoding="UTF\-8" standalone="yes"?>
\&  <assembly xmlns="urn:schemas\-microsoft\-com:asm.v1" manifestVersion="1.0">
\&    <assemblyIdentity version="1.0.0.0" type="win32" name="Super.wxPerl.Application" />
\&    <description>Super wxPerl Application</description>
\&    <dependency>
\&        <dependentAssembly>
\&            <assemblyIdentity type="win32" 
\&             name="Microsoft.Windows.Common\-Controls" 
\&             version="6.0.0.0" 
\&             publicKeyToken="6595b64144ccf1df" 
\&             language="*"
\&             processorArchitecture="*" />
\&        </dependentAssembly>
\&    </dependency>
\&    <trustInfo xmlns="urn:schemas\-microsoft\-com:asm.v3">
\&        <security>
\&            <requestedPrivileges>
\&                <requestedExecutionLevel level="asInvoker" uiAccess="false" />
\&            </requestedPrivileges>
\&        </security>
\&    </trustInfo>
\&  </assembly>
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mattia Barbon <mbarbon@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
