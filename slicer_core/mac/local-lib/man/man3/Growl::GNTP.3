.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Growl::GNTP 3"
.TH Growl::GNTP 3 "2016-04-08" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Growl::GNTP \- Perl implementation of GNTP Protocol (Client Part)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  use Growl::GNTP;
\&  my $growl = Growl::GNTP\->new(AppName => "my perl app");
\&  $growl\->register([
\&      { Name => "foo", },
\&      { Name => "bar", },
\&  ]);
\&  
\&  $growl\->notify(
\&      Name => "foo",
\&      Title => "my notify",
\&      Message => "my message",
\&      Icon => "http://www.example.com/my\-face.png",
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Growl::GNTP is Perl implementation of \s-1GNTP\s0 Protocol (Client Part)
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( \s-1ARGS\s0 )" 4
.IX Item "new ( ARGS )"
Initialize Growl::GNTP object. You can set few parameter of
IO::Socket::INET. and application name will be given 'Growl::GNTP' if you
does not specify it.
.RS 4
.Sp
.Vb 8
\&  PeerHost                # \*(Aqlocalhost\*(Aq
\&  PeerPort                # 23053
\&  Timeout                 # 5
\&  AppName                 # \*(AqGrowl::GNTP\*(Aq
\&  AppIcon                 # \*(Aq\*(Aq
\&  Password                # \*(Aq\*(Aq
\&  PasswordHashAlgorithm   # \*(AqMD5\*(Aq
\&  EncryptAlgorithm        # \*(Aq\*(Aq
.Ve
.RE
.RS 4
.RE
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.IP "register ( [\s-1ARGS\s0] )" 4
.IX Item "register ( [ARGS] )"
Register notification definition. You should be specify \s-1ARRAY\s0 reference of
\&\s-1HASH\s0 reference like a following.
.Sp
.Vb 6
\&  {
\&      Name        => \*(AqMY_GROWL_NOTIFY\*(Aq,
\&      DisplayName => \*(AqMy Growl Notify\*(Aq,
\&      Enabled     => \*(AqTrue\*(Aq,
\&      Icon        => \*(Aq\*(Aq
\&  }
.Ve
.IP "notify ( \s-1ARGS\s0 )" 4
.IX Item "notify ( ARGS )"
Notify item. You should be specify \s-1HASH\s0 reference like a following.
.Sp
.Vb 10
\&  {
\&      Name                => \*(AqWarn\*(Aq, # name of notification
\&      Title               => \*(AqFoo!\*(Aq,
\&      Message             => \*(AqBar!\*(Aq,
\&      Icon                => \*(Aqhttp://www.example.com/myface.png\*(Aq,
\&      CallbackTarget      => \*(Aq\*(Aq, # Used for causing a HTTP/1.1 GET request exactly as specificed by this URL. Exclusive of CallbackContext
\&      CallbackContextType => time, # type of the context
\&      CallbackContext     => \*(AqTime\*(Aq,
\&      CallbackFunction    => sub { warn \*(Aqcallback!\*(Aq }, # should only be used when a callback in use, and CallbackContext in use.
\&      ID                  => \*(Aq\*(Aq, # allows for overriding/updateing an existing notification when in use, and discriminating between alerts of the same Name
\&      Custom              => { CustomHeader => \*(Aqvalue\*(Aq }, # These will be added as custom headers as X\-KEY : value, where \*(AqX\-\*(Aq is prefixed to the key
\&      Priority            => 0,  # \-2 .. 2 low \-> severe
\&      Sticky              => \*(AqFalse\*(Aq
\&  }
.Ve
.Sp
And callback function is given few arguments.
.Sp
.Vb 4
\&    CallbackFunction => sub {
\&        my ($result, $type, $context, $id, $timestamp) = @_;
\&        print "$result: $context ($type)\en";
\&    }
.Ve
.IP "wait ( \s-1WAIT_ALL\s0 )" 4
.IX Item "wait ( WAIT_ALL )"
Wait callback items. If \s-1WAIT_ALL\s0 is not 0, this function wait all callbacks
as \s-1CLICK, CLOSED, TIMEOUT.\s0
.IP "subscribe ( \s-1ARGS\s0 )" 4
.IX Item "subscribe ( ARGS )"
Subscribe notification. You should be specify \s-1HASH\s0 reference like a following.
.Sp
.Vb 8
\&    {
\&        Port => 23054,
\&        Password => \*(Aqsecret\*(Aq,
\&        CallbackFunction => sub {
\&            my ($Title, $Message) = @_;
\&            print decode_utf8($Title),",",decode_utf8($Message),"\en";
\&        },
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Yasuhiro Matsumoto <mattn.jp@gmail.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::Growl, Net::GrowlClient, Mac::Growl,
\&\fIhttp://www.growlforwindows.com/gfw/help/gntp.aspx\fR
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
