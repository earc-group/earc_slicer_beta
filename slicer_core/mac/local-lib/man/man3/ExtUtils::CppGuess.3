.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ExtUtils::CppGuess 3"
.TH ExtUtils::CppGuess 3 "2017-10-21" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::CppGuess \- guess C++ compiler and flags
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
With Extutils::MakeMaker:
.PP
.Vb 1
\&    use ExtUtils::CppGuess;
\&
\&    my $guess = ExtUtils::CppGuess\->new;
\&
\&    WriteMakefile
\&      ( # MakeMaker args,
\&        $guess\->makemaker_options,
\&        );
.Ve
.PP
With Module::Build:
.PP
.Vb 1
\&    my $guess = ExtUtils::CppGuess\->new;
\&
\&    my $build = Module::Build\->new
\&      ( # Module::Build arguments
\&        $guess\->module_build_options,
\&        );
\&    $build\->create_build_script;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`ExtUtils::CppGuess\*(C'\fR attempts to guess the system's \*(C+ compiler
that is compatible with the C compiler that your perl was built with.
.PP
It can generate the necessary options to the Module::Build
constructor or to ExtUtils::MakeMaker's \f(CW\*(C`WriteMakefile\*(C'\fR
function.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Creates a new \f(CW\*(C`ExtUtils::CppGuess\*(C'\fR object.
Takes the path to the C compiler as the \f(CW\*(C`cc\*(C'\fR argument,
but falls back to the value of \f(CW$Config{cc}\fR, which should
be what you want anyway.
.PP
You can specify \f(CW\*(C`extra_compiler_flags\*(C'\fR and \f(CW\*(C`extra_linker_flags\*(C'\fR
(as strings) which will be merged in with the auto-detected ones.
.SS "module_build_options"
.IX Subsection "module_build_options"
Returns the correct options to the constructor of \f(CW\*(C`Module::Build\*(C'\fR.
These are:
.PP
.Vb 2
\&    extra_compiler_flags
\&    extra_linker_flags
.Ve
.SS "makemaker_options"
.IX Subsection "makemaker_options"
Returns the correct options to the \f(CW\*(C`WriteMakefile\*(C'\fR function of
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR.
These are:
.PP
.Vb 2
\&    CCFLAGS
\&    dynamic_lib => { OTHERLDFLAGS => ... }
.Ve
.PP
If you specify the extra compiler or linker flags in the
constructor, they'll be merged into \f(CW\*(C`CCFLAGS\*(C'\fR or
\&\f(CW\*(C`OTHERLDFLAGS\*(C'\fR respectively.
.SS "is_gcc"
.IX Subsection "is_gcc"
Returns true if the detected compiler is in the gcc family.
.SS "is_msvc"
.IX Subsection "is_msvc"
Returns true if the detected compiler is in the \s-1MS VC\s0 family.
.SS "add_extra_compiler_flags"
.IX Subsection "add_extra_compiler_flags"
Takes a string as argument that is added to the string of extra compiler
flags.
.SS "add_extra_linker_flags"
.IX Subsection "add_extra_linker_flags"
Takes a string as argument that is added to the string of extra linker
flags.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mattia Barbon <mbarbon@cpan.org>
.PP
Steffen Mueller <smueller@cpan.org>
.PP
Tobias Leich <froggs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2010, 2011 by Mattia Barbon.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
