.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "build::Wx::build::MakeMaker 3"
.TH build::Wx::build::MakeMaker 3 "2014-03-08" "perl v5.28.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Wx::build::MakeMaker \- ExtUtils::MakeMaker specialisation for wxPerl modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Wx::build::MakeMaker;
.PP
wxWriteMakefile( \s-1NAME\s0         => 'My::Module',
                 \s-1VERSION_FROM\s0 => 'Module.pm' );
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "wxWriteMakefile"
.IX Subsection "wxWriteMakefile"
.Vb 1
\&  wxWriteMakefile( arameter => value, ... );
.Ve
.PP
This functions is meant to be used exactly as
ExtUtils::MakeMaker::WriteMakefile (see). It accepts all WriteMakefile's
parameters, plus:
.IP "\(bu" 4
\&\s-1WX_CORE_LIB\s0
.Sp
.Vb 1
\&  WX_CORE_LIB => \*(Aqxrc core base\*(Aq
.Ve
.Sp
link libraries from wxWidgets' core or contrib directory.
If not spedified, defaults to 'adv html core net base' for compatibility.
.IP "\(bu" 4
\&\s-1WX_LIB\s0
.Sp
.Vb 1
\&  WX_LIB => \*(Aq\-lxrc\*(Aq
.Ve
.Sp
Link additional libraries from wxWidgets' contrib directory.
.IP "\(bu" 4
\&\s-1REQUIRE_WX\s0
.Sp
.Vb 1
\&  REQUIRE_WX => 2.003002  # wxWidgets 2.3.2
.Ve
.Sp
Do not build this module if wxWidgets' version is lower than the version
specified.
.IP "\(bu" 4
\&\s-1NO_WX_PLATFORMS\s0
.Sp
.Vb 1
\&  NO_WX_PLATFORMS => [ \*(Aqx11\*(Aq, \*(Aqmsw\*(Aq ]
.Ve
.Sp
Do not build this module on the specified platform(s).
.IP "\(bu" 4
ON_WX_PLATFORMs
.Sp
.Vb 1
\&  ON_WX_PLATFORMS => [ \*(Aqgtk\*(Aq ]
.Ve
.Sp
only build this module on the specified platform(s).
.SH "PRIVATE FUNCTIONS"
.IX Header "PRIVATE FUNCTIONS"
These functions are here for reference, do not use them.
.SS "is_core"
.IX Subsection "is_core"
.Vb 1
\&  if( is_core ) { ... }
.Ve
.PP
True if it is building the wxPerl core (Wx.dll), false otherwise.
.SS "is_wxPerl_tree"
.IX Subsection "is_wxPerl_tree"
.Vb 1
\&  if( is_wxPerl_tree ) { ... }
.Ve
.PP
True if it is building any part of wxPerl, false otherwise.
.SS "set_hook_package"
.IX Subsection "set_hook_package"
.Vb 1
\&  Wx::build::MakeMaker::set_hook_package( \*(Aqpackage_name\*(Aq );
.Ve
.PP
Package to be hooked into the MakeMaker inheritance chain.
.SH "METHODS"
.IX Header "METHODS"
.SS "get_api_directory"
.IX Subsection "get_api_directory"
.Vb 1
\&  my $dir = $cfg\->get_api_directory;
.Ve
.SS "get_arch_directory"
.IX Subsection "get_arch_directory"
.Vb 1
\&  my $dir = $cfg\->get_arch_directory;
.Ve
